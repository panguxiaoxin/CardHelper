package com.ryx.card_api.core;

import android.app.Application;
import android.content.Context;
import android.os.Handler;
import android.os.Looper;

import com.ryx.card_annotation.annotation.Card;
import com.ryx.card_annotation.model.CardMeta;
import com.ryx.card_api.exception.InitException;
import com.ryx.card_api.log.DefaultLogger;
import com.ryx.card_api.log.ILogger;
import com.ryx.card_api.template.ICardGroup;
import com.ryx.card_api.template.ICardRoot;
import com.ryx.card_api.util.ClassUtils;
import com.ryx.card_api.util.Consts;
import com.ryx.card_api.util.PackageUtils;

import java.lang.reflect.InvocationTargetException;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import static com.ryx.card_api.util.Consts.TAG;


/**
 * Created by zhaojianxin on 2020/07/24
 */

public class CardManager {

    private volatile static boolean hasInit = false;
    private volatile static boolean debuggble = false;
    private volatile static CardManager instance = null;
    private static ILogger logger;
    private static Context mContext;
    private static Handler mHandler;


    private CardManager(){}

    public static synchronized void init(Application application){
        if(!hasInit) {
            hasInit = true;
            mContext = application;
            mHandler = new Handler(Looper.getMainLooper());
            logger = new DefaultLogger();
            index=0;
            loadCardData();
        //    initData();
        }
    }



    public static CardManager getInstance() {
        if(!hasInit) {
            throw new InitException("CardManager need be call $CardManager.init()");
        } else {
            if(instance == null) {
                synchronized (CardManager.class) {
                    if(instance == null) {
                        instance = new CardManager();
                    }
                }
            }
        }
        return instance;
    }





    /**
     * 主线程执行启动activity
     * @param runnable
     */
    private void runInMainThread(Runnable runnable) {
        if(Looper.getMainLooper().getThread() != Thread.currentThread()) {
            mHandler.post(runnable);
        } else {
            runnable.run();
        }
    }


    public   CardMeta getCardMetaByTypeName(String typeName){

        CardMeta cardMeta=Warehouse.cards.get(typeName);

        if(cardMeta!=null){
           return cardMeta;
        }else{
            CardMeta oldcarMeta=Warehouse.templateCards.get(typeName);
            Class c=oldcarMeta.getClazz();
            Card card = (Card) c.getAnnotation(Card.class);
            oldcarMeta.setPresenter(card.presenter());
            Warehouse.cards.put(typeName,oldcarMeta);
            Warehouse.cards_int.put(oldcarMeta.getType(),oldcarMeta);
            Warehouse.templateCards.remove(typeName);
            return oldcarMeta;
        }
    }


    public CardMeta getCardMetaByType(int type){
        return Warehouse.cards_int.get(type);
    }
    public synchronized static void openDebug(){
        debuggble = true;
        if(logger != null)
            logger.showLog(debuggble);
    }

    public static boolean debuggable() {
        return debuggble;
    }

    public synchronized static void loadCardData(){

    }
    static int index=0;

    public synchronized static void registerCardMeta(String className){
        Map<String, Class<? extends ICardGroup>> map= null;
        try {
            map = ((ICardRoot)(Class.forName(className).getConstructor().newInstance())).getGroupMap();
        } catch (Exception e) {
            e.printStackTrace();
        }
        Iterator<String> iterator= map.keySet().iterator();
        while (iterator.hasNext()){
            String name=iterator.next();
            Class<? extends ICardGroup> group=map.get(name);
            ICardGroup iRouteGroup = null;
            try {
                iRouteGroup = group.getConstructor().newInstance();
                Map<String, CardMeta> cardMetaMap=  iRouteGroup.getPathMap();
                Iterator<String>    iterator1= cardMetaMap.keySet().iterator();
                while (iterator1.hasNext()){
                    String key=iterator1.next();
                    CardMeta cardMeta= cardMetaMap.get(key);
                    cardMeta.setType(index);
                    Warehouse.templateCards.put(key,cardMeta);
                    index++;
                }
            }  catch (Exception e) {
                e.printStackTrace();
            }

        }
    }

    public synchronized static void initData() {
        Set<String> cardMap;
        try {
            if(CardManager.debuggable() || PackageUtils.isNewVersion(mContext)) { //开发模式或版本升级时扫描本地件
                logger.info(TAG,"当前环境为debug模式或者新版本，需要重新生成映射关系表");
                //these class was generated by router-compiler
                cardMap = ClassUtils.getFileNameByPackageName(mContext, Consts.CARD_ROOT_PAKCAGE);
                if(!cardMap.isEmpty()) {
                    PackageUtils.put(mContext,Consts.CARD_SP_KEY_MAP,cardMap);
                }
                PackageUtils.updateVersion(mContext);
            } else{ //读取缓存
                logger.info(TAG,"读取缓存中的router映射表");
                cardMap = PackageUtils.get(mContext,Consts.CARD_SP_KEY_MAP);
            }

            logger.info(TAG,"router map 扫描完成");
            //将分组数据加载到内存
            int index=0;
            for (String className : cardMap) {
                //Root
                if(className.startsWith(Consts.CARD_ROOT_PAKCAGE + Consts.DOT + Consts.SDK_NAME + Consts.SEPARATOR + Consts.SUFFIX_ROOT)) {
                    Map<String, Class<? extends ICardGroup>> map=  ((ICardRoot)(Class.forName(className).getConstructor().newInstance())).getGroupMap();
                    Iterator<String> iterator= map.keySet().iterator();
                    while (iterator.hasNext()){
                        String name=iterator.next();
                        Class<? extends ICardGroup> group=map.get(name);
                        ICardGroup iRouteGroup = null;
                        try {
                            iRouteGroup = group.getConstructor().newInstance();
                            Map<String, CardMeta> cardMetaMap=  iRouteGroup.getPathMap();
                            Iterator<String>    iterator1= cardMetaMap.keySet().iterator();
                            while (iterator1.hasNext()){
                                String key=iterator1.next();
                                CardMeta cardMeta= cardMetaMap.get(key);
                                cardMeta.setType(index);
                                Warehouse.templateCards.put(key,cardMeta);
                                index++;
                            }

                        }  catch (Exception e) {
                            e.printStackTrace();
                        }

                    }
                }
            }

            logger.info(TAG,"将映射关系读到缓存中");


        } catch (Exception e) {
            e.printStackTrace();
            logger.error(TAG,"CardManager init logistics center exception! [" + e.getMessage() + "]");
        }
    }


    public static void clear() {
        Warehouse.clear();
    }

    public synchronized static void destory(){

    }
}
